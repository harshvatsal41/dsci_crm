{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshvatsal/Desktop/DSCI/CMS/DSCI_Events/dsci_crm/src/Mongo/Lib/dbConnect.js"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nlet isConnected = false; // Maintain the connection state\r\n\r\nconst connectDB = async () => {\r\n    if (isConnected) {\r\n        console.log(\"Already connected to MongoDB\");\r\n        return;\r\n    }\r\n\r\n    if (!process.env.DB_USERNAME || !process.env.DB_PASSWORD) {\r\n        throw new Error(\"Database credentials are missing in environment variables\");\r\n    }\r\n\r\n    try {\r\n        const db = await mongoose.connect(process.env.DB_URI, {\r\n            serverSelectionTimeoutMS: 30000, // Increase timeout to 30 seconds\r\n            socketTimeoutMS: 30000, // Increase socket timeout\r\n        });\r\n        isConnected = db.connection.readyState === 1; // 1 means connected\r\n        console.log(\"Connected to MongoDB\");\r\n    } catch (error) {\r\n        console.error(\"Error connecting to MongoDB:\", error.message);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI,cAAc,OAAO,gCAAgC;AAEzD,MAAM,YAAY;IACd,IAAI,aAAa;QACb,QAAQ,GAAG,CAAC;QACZ;IACJ;IAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;QACtD,MAAM,IAAI,MAAM;IACpB;IAEA,IAAI;QACA,MAAM,KAAK,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,MAAM,EAAE;YAClD,0BAA0B;YAC1B,iBAAiB;QACrB;QACA,cAAc,GAAG,UAAU,CAAC,UAAU,KAAK,GAAG,oBAAoB;QAClE,QAAQ,GAAG,CAAC;IAChB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,gCAAgC,MAAM,OAAO;QAC3D,MAAM;IACV;AACJ;uCAGe","debugId":null}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshvatsal/Desktop/DSCI/CMS/DSCI_Events/dsci_crm/src/Mongo/Model/AcessModels/Employee.js"],"sourcesContent":["import mongoose from 'mongoose';\r\nimport bcrypt from 'bcryptjs';\r\n\r\n// Updated user schema\r\nconst employeeSchema = new mongoose.Schema({\r\n    username: {\r\n        type: String,\r\n        required: [true, \"Please provide a username\"],\r\n        unique: true,\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: [true, \"Please provide an email\"],\r\n        unique: true,\r\n    },contactNo: {\r\n        type: String,\r\n        required: [true, \"Please provide a contact number\"],\r\n        validate: {\r\n            validator: function (v) {\r\n                // Ensure the contact number is numeric and at least 10 digits\r\n                return /^\\d{10,}$/.test(v);\r\n            },\r\n            message: \"Please enter a valid contact number\",\r\n        },\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: [true, \"Please provide a password\"],\r\n    },\r\n    isVerified: {\r\n        type: Boolean,\r\n        default: false,\r\n    },\r\n    isAdmin: {\r\n        type: Boolean,\r\n        default: false,\r\n    },\r\n    isDisabled: {\r\n        type: Boolean,\r\n        default: false,\r\n    },\r\n    forgotPasswordToken: String,\r\n    forgotPasswordTokenExpiry: Date,\r\n    verifyToken: String,\r\n    verifyTokenExpiry: Date,\r\n});\r\n\r\n// Hash password before saving the user\r\nemployeeSchema.pre('save', async function (next) {\r\n    if (!this.isModified('password')) return next();\r\n\r\n    // Salt and hash the password\r\n    const salt = await bcrypt.genSalt(10);\r\n    this.password = await bcrypt.hash(this.password, salt);\r\n    next();\r\n});\r\n\r\n// Compare password during login\r\nemployeeSchema.methods.matchPassword = async function (password) {\r\n    return await bcrypt.compare(password, this.password);\r\n};\r\n\r\n// Create the User model\r\nconst Employee = mongoose.models.Employee || mongoose.model('Employee', employeeSchema);\r\n\r\nexport default Employee;"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,sBAAsB;AACtB,MAAM,iBAAiB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACvC,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;QAC7C,QAAQ;IACZ;IACA,OAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;QAC3C,QAAQ;IACZ;IAAE,WAAW;QACT,MAAM;QACN,UAAU;YAAC;YAAM;SAAkC;QACnD,UAAU;YACN,WAAW,SAAU,CAAC;gBAClB,8DAA8D;gBAC9D,OAAO,YAAY,IAAI,CAAC;YAC5B;YACA,SAAS;QACb;IACJ;IACA,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;IACjD;IACA,YAAY;QACR,MAAM;QACN,SAAS;IACb;IACA,SAAS;QACL,MAAM;QACN,SAAS;IACb;IACA,YAAY;QACR,MAAM;QACN,SAAS;IACb;IACA,qBAAqB;IACrB,2BAA2B;IAC3B,aAAa;IACb,mBAAmB;AACvB;AAEA,uCAAuC;AACvC,eAAe,GAAG,CAAC,QAAQ,eAAgB,IAAI;IAC3C,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,OAAO;IAEzC,6BAA6B;IAC7B,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC;IAClC,IAAI,CAAC,QAAQ,GAAG,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;IACjD;AACJ;AAEA,gCAAgC;AAChC,eAAe,OAAO,CAAC,aAAa,GAAG,eAAgB,QAAQ;IAC3D,OAAO,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,IAAI,CAAC,QAAQ;AACvD;AAEA,wBAAwB;AACxB,MAAM,WAAW,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,YAAY;uCAEzD","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///Users/harshvatsal/Desktop/DSCI/CMS/DSCI_Events/dsci_crm/src/app/api/admin/auth/register/route.js"],"sourcesContent":["import dbConnect from \"@/Mongo/Lib/dbConnect\";\r\nimport Employee from \"@/Mongo/Model/AcessModels/Employee\";\r\n\r\n\r\nexport async function POST(req) {\r\n    try {\r\n        await dbConnect();\r\n\r\n        const { username, email, password, contactNo } = await req.json();\r\n\r\n        if (!username || !email || !password || !contactNo) {\r\n            return new Response(\r\n                JSON.stringify({ error: \"All fields are required.\" }),\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        const existingUser = await Employee.findOne({ email });\r\n\r\n        if (existingUser) {\r\n            return new Response(\r\n                JSON.stringify({ error: \"User already exists.\" }),\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n\r\n        const user = await Employee.create({ username, email, password: password, contactNo });\r\n\r\n        return new Response(\r\n            JSON.stringify({\r\n                message: \"User registered successfully!\",\r\n                user: { id: user._id, username: user.username, email: user.email },\r\n            }),\r\n            { status: 201 }\r\n        );\r\n    } catch (error) {\r\n        console.error(\"Error handling POST request:\", error.stack);\r\n        return new Response(\r\n            JSON.stringify({ error: \"An error occurred. Please try again.\" }),\r\n            { status: 500 }\r\n        );\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe,KAAK,GAAG;IAC1B,IAAI;QACA,MAAM,CAAA,GAAA,kIAAA,CAAA,UAAS,AAAD;QAEd,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,IAAI;QAE/D,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,YAAY,CAAC,WAAW;YAChD,OAAO,IAAI,SACP,KAAK,SAAS,CAAC;gBAAE,OAAO;YAA2B,IACnD;gBAAE,QAAQ;YAAI;QAEtB;QAEA,MAAM,eAAe,MAAM,kJAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;YAAE;QAAM;QAEpD,IAAI,cAAc;YACd,OAAO,IAAI,SACP,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAuB,IAC/C;gBAAE,QAAQ;YAAI;QAEtB;QAGA,MAAM,OAAO,MAAM,kJAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;YAAE;YAAU;YAAO,UAAU;YAAU;QAAU;QAEpF,OAAO,IAAI,SACP,KAAK,SAAS,CAAC;YACX,SAAS;YACT,MAAM;gBAAE,IAAI,KAAK,GAAG;gBAAE,UAAU,KAAK,QAAQ;gBAAE,OAAO,KAAK,KAAK;YAAC;QACrE,IACA;YAAE,QAAQ;QAAI;IAEtB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,gCAAgC,MAAM,KAAK;QACzD,OAAO,IAAI,SACP,KAAK,SAAS,CAAC;YAAE,OAAO;QAAuC,IAC/D;YAAE,QAAQ;QAAI;IAEtB;AACJ","debugId":null}}]
}